ARG ROS_DISTRO
FROM ros:${ROS_DISTRO}-ros-core

# Install common tools and ROS2 packages
# hadolint ignore=DL3008
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    jq \
    vim \
    "ros-${ROS_DISTRO}-ros-base" \
    "ros-${ROS_DISTRO}-ros2bag" \
    "ros-${ROS_DISTRO}-rosbag2-transport" \
    "ros-${ROS_DISTRO}-rosbag2-storage-mcap" && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Set up runtime environment
ARG USERNAME=ubuntu
RUN id -u 1000 >/dev/null 2>&1 || useradd -m -u 1000 ${USERNAME}
USER ${USERNAME}
ENV PATH="/home/${USERNAME}/.local/bin:$PATH"
RUN mkdir -p /home/${USERNAME}/runtime
WORKDIR /home/${USERNAME}/runtime

# Install uv
ARG UV_VERSION
RUN /bin/bash -c "curl -LsSf https://astral.sh/uv/${UV_VERSION}/install.sh | sh && uv --version"

# Set up virtual environment and install PyPI dependencies
COPY --chown=${USERNAME}:${USERNAME} pyproject.toml ./
COPY --chown=${USERNAME}:${USERNAME} uv.lock ./
ARG DEV_MODE
RUN if [ "_${DEV_MODE}" = "_true" ]; then \
    uv sync --group ros2; \
    else \
    uv sync --no-dev --group ros2; \
    fi

# Copy source code
COPY --chown=${USERNAME}:${USERNAME} main.py ./
COPY --chown=${USERNAME}:${USERNAME} app.py ./
COPY --chown=${USERNAME}:${USERNAME} server.py ./
COPY --chown=${USERNAME}:${USERNAME} settings.py ./
COPY --chown=${USERNAME}:${USERNAME} src ./src
COPY --chown=${USERNAME}:${USERNAME} test ./test
RUN if [ "_$DEV_MODE" = "_false" ]; then rm -rf ./test; fi

# Assign default local host
ARG BAGEL_LOCAL_HOST
ENV BAGEL_LOCAL_HOST=${BAGEL_LOCAL_HOST}

# Expose webapp port
ARG BAGEL_WEBAPP_LOCAL_PORT
ENV BAGEL_WEBAPP_LOCAL_PORT=${BAGEL_WEBAPP_LOCAL_PORT}
EXPOSE ${BAGEL_WEBAPP_LOCAL_PORT}

# Expose MCP server port
ARG BAGEL_MCP_LOCAL_PORT
ENV BAGEL_MCP_LOCAL_PORT=${BAGEL_MCP_LOCAL_PORT}
EXPOSE ${BAGEL_MCP_LOCAL_PORT}

# By default, the webapp will be launched
CMD ["uv", "run", "main.py", "up", "webapp"]
