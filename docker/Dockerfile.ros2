ARG ROS_DISTRO
FROM ros:${ROS_DISTRO}-ros-core

# Upgrade base image
RUN apt-get update && apt-get upgrade -y && \
    apt-get dist-upgrade -y && \
    apt-get autoremove -y && \
    apt-get clean

# Install common tools
RUN apt-get update && \
    apt-get install -y --no-install-recommends jq vim

# Install pip and venv
RUN apt-get update && \
    apt-get install -y --no-install-recommends python3-pip python3-venv && \
    python3 -m pip --version && \
    python3 -m venv --help

# Install ROS2 packages
RUN apt-get -y --no-install-recommends install \
    ros-${ROS_DISTRO}-ros-base \
    ros-${ROS_DISTRO}-ros2bag \
    ros-${ROS_DISTRO}-rosbag2-transport \
    ros-${ROS_DISTRO}-rosbag2-storage-mcap

# Set up runtime environment
ARG USERNAME=ubuntu
RUN id -u 1000 >/dev/null 2>&1 || useradd -m -u 1000 ${USERNAME}
USER ${USERNAME}
ENV PATH="/home/${USERNAME}/.local/bin:$PATH"
RUN mkdir -p /home/${USERNAME}/runtime
WORKDIR /home/${USERNAME}/runtime

# Install pipx
ARG PIPX_VERSION
RUN python3 -m venv /home/${USERNAME}/.venv_pipx
RUN /bin/bash -c "source /home/${USERNAME}/.venv_pipx/bin/activate && \
    python3 -m pip install \"pipx==${PIPX_VERSION}\" && \
    pipx ensurepath && \
    pipx --version"

# Install Poetry
ARG POETRY_VERSION
RUN python3 -m venv /home/${USERNAME}/.venv_pipx
RUN /bin/bash -c "source /home/${USERNAME}/.venv_pipx/bin/activate && \
    pipx install \"poetry==${POETRY_VERSION}\" && \
    poetry self add poetry-plugin-shell && \
    poetry --version"

# Set up virtual environment and install PyPI dependencies
COPY --chown=${USERNAME}:${USERNAME} pyproject.toml ./
RUN poetry config virtualenvs.create true && \
    poetry config virtualenvs.in-project true && \
    poetry env activate

ARG DEV_MODE
RUN if [ "_${DEV_MODE}" = "_true" ]; then \
    poetry install --only main,ros2,dev --no-root --no-interaction --no-ansi; \
    else \
    poetry install --only main,ros2 --no-root --no-interaction --no-ansi; \
    fi

# Copy source code
COPY --chown=${USERNAME}:${USERNAME} main.py ./
COPY --chown=${USERNAME}:${USERNAME} app.py ./
COPY --chown=${USERNAME}:${USERNAME} settings.py ./
COPY --chown=${USERNAME}:${USERNAME} src ./src
COPY --chown=${USERNAME}:${USERNAME} test ./test
RUN if [ "_$DEV_MODE" = "_false" ]; then rm -rf ./test; fi

# Set up host and port for the webapp
ARG BAGEL_WEBAPP_LOCAL_HOST
ARG BAGEL_WEBAPP_LOCAL_PORT
ENV BAGEL_WEBAPP_LOCAL_HOST=${BAGEL_WEBAPP_LOCAL_HOST}
ENV BAGEL_WEBAPP_LOCAL_PORT=${BAGEL_WEBAPP_LOCAL_PORT}
EXPOSE ${BAGEL_WEBAPP_LOCAL_PORT}

# By default, the webapp will be launched
CMD ["poetry", "run", "python3", "main.py", "up"]
