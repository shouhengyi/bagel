# Ubuntu 20.04 LTS (Focal Fossa)
# Python 3.8.10
FROM ros:noetic

# Set the shell to use for RUN commands, enabling pipefail for robust scripting
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

########################################################
### ROS1 Noetic has reached EOL as of May, 2025      ###
### The following steps are needed to fix this image ###
########################################################

# Remove old ROS package repository lists to prevent conflicts or signature errors
# and remove the expired GPG key used to authenticate ROS package repositories
RUN rm -f \
    /etc/apt/sources.list.d/ros-latest.list \
    /etc/apt/sources.list.d/ros1-latest.list \
    /usr/share/keyrings/ros1-latest-archive-keyring.gpg \
    /usr/share/keyrings/ros-archive-keyring.gpg

# Remove the expired GPG key associated with Open Robotics, if present
ARG GPG_KEY=F42ED6FBAB17C654
RUN if apt-key list | grep -q "${GPG_KEY}"; then \
    apt-key del "${GPG_KEY}"; \
    else \
    echo "GPG Key ${GPG_KEY} not found, skipping deletion."; \
    fi

# Install tools needed to add new ROS package repositories and GPG keys
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl=7.68.0-1ubuntu2.25 \
    gnupg=2.2.19-3ubuntu2.5 \
    jq=1.6-1ubuntu0.20.04.1 \
    lsb-release=11.1.0ubuntu2 \
    vim=2:8.1.2269-1ubuntu5.32 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Update ROS package repository lists and add the new GPG key
ARG GPG_FILE=/usr/share/keyrings/ros-archive-keyring.gpg
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o ${GPG_FILE} && \
    echo "deb [signed-by=${GPG_FILE}] http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" \
    > /etc/apt/sources.list.d/ros-latest.list

# Source ROS for all users
RUN echo "source /opt/ros/noetic/setup.bash" >> /etc/bash.bashrc

#######################################################
# ROS1 Noetic should be fixed at this point           #
# Now we can continue with the rest of the Dockerfile #
#######################################################

# Install new version Python
ARG PYTHON_VERSION=3.10
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    software-properties-common=0.99.9.12 && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get install -y --no-install-recommends \
    python${PYTHON_VERSION}=3.10.18-1+focal1 && \
    ln -sf /usr/bin/python${PYTHON_VERSION} /usr/bin/python3 && \
    python3 --version && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Set up runtime environment
ARG USERNAME=ubuntu
RUN id -u 1000 >/dev/null 2>&1 || useradd -m -u 1000 ${USERNAME}
USER ${USERNAME}
ENV PATH="/home/${USERNAME}/.local/bin:$PATH"
RUN mkdir -p /home/${USERNAME}/runtime
WORKDIR /home/${USERNAME}/runtime

# Install uv
ARG UV_VERSION
RUN /bin/bash -c "curl -LsSf https://astral.sh/uv/${UV_VERSION}/install.sh | sh && uv --version"

# Set up virtual environment and install PyPI dependencies
COPY --chown=${USERNAME}:${USERNAME} pyproject.toml ./
COPY --chown=${USERNAME}:${USERNAME} uv.lock ./
ARG DEV_MODE
RUN if [ "_${DEV_MODE}" = "_true" ]; then \
    uv sync --group ros1; \
    else \
    uv sync --no-dev --group ros1; \
    fi

# Copy source code
COPY --chown=${USERNAME}:${USERNAME} main.py ./
COPY --chown=${USERNAME}:${USERNAME} app.py ./
COPY --chown=${USERNAME}:${USERNAME} settings.py ./
COPY --chown=${USERNAME}:${USERNAME} src ./src
COPY --chown=${USERNAME}:${USERNAME} test ./test
RUN if [ "_$DEV_MODE" = "_false" ]; then rm -rf ./test; fi

# Set up host and port for the webapp
ARG BAGEL_WEBAPP_LOCAL_HOST
ARG BAGEL_WEBAPP_LOCAL_PORT
ENV BAGEL_WEBAPP_LOCAL_HOST=${BAGEL_WEBAPP_LOCAL_HOST}
ENV BAGEL_WEBAPP_LOCAL_PORT=${BAGEL_WEBAPP_LOCAL_PORT}
EXPOSE ${BAGEL_WEBAPP_LOCAL_PORT}

# By default, the webapp will be launched
CMD ["uv", "run", "main.py", "up"]
