# ./docker/Dockerfile.px4

FROM ubuntu:22.04

# Set non-interactive mode which is needed for apt 
ENV DEBIAN_FRONTEND=noninteractive

# Update and install basic tools 
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    wget \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# Install pip and venv
RUN apt-get update && \
    apt-get install -y --no-install-recommends python3-pip python3-venv && \
    python3 -m pip --version && \
    python3 -m venv --help



# Set up runtime environment
ARG USERNAME=ubuntu
RUN id -u 1000 >/dev/null 2>&1 || useradd -m -u 1000 ${USERNAME}
USER ${USERNAME}
ENV PATH="/home/${USERNAME}/.local/bin:$PATH"
RUN mkdir -p /home/${USERNAME}/runtime
WORKDIR /home/${USERNAME}/runtime

# Install pipx
ARG PIPX_VERSION
RUN python3 -m venv /home/${USERNAME}/.venv_pipx
RUN /bin/bash -c "source /home/${USERNAME}/.venv_pipx/bin/activate && \
    python3 -m pip install \"pipx==${PIPX_VERSION}\" && \
    pipx ensurepath && \
    pipx --version"

# Install Poetry
ARG POETRY_VERSION
RUN python3 -m venv /home/${USERNAME}/.venv_pipx
RUN /bin/bash -c "source /home/${USERNAME}/.venv_pipx/bin/activate && \
    pipx install \"poetry==${POETRY_VERSION}\" && \
    poetry self add poetry-plugin-shell && \
    poetry --version"

# Set up virtual environment and install PyPI dependencies
COPY --chown=${USERNAME}:${USERNAME} pyproject.toml ./
RUN poetry config virtualenvs.create true && \
    poetry config virtualenvs.in-project true && \
    poetry env activate

ARG DEV_MODE
RUN if [ "_${DEV_MODE}" = "_true" ]; then \
   poetry install --only main,px4 --no-root --no-interaction --no-ansi; \
    else \
    poetry install --only main,px4 --no-root --no-interaction --no-ansi; \
    fi

CMD ["poetry", "run", "python3", "main.py", "up"]
